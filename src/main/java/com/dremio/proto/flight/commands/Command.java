// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package com.dremio.proto.flight.commands;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("dremio_java_bean.java.stg")
public final class Command  implements Externalizable, Message<Command>, Schema<Command>
{

    public static Schema<Command> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Command getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Command DEFAULT_INSTANCE = new Command();


    private String
            query;
    private Boolean
            parallel;

    public Command()
    {

    }

    public Command(
            String query,
            Boolean parallel
    )
    {
        this.query = query;
        this.parallel = parallel;
    }

    // getters and setters

    // query
    public String
    getQuery()
    {
        return query;
    }

    public Command setQuery(String
                                    query)
    {
        this.query = query;
        return this;
    }

    // parallel
    public Boolean
    getParallel()
    {
        return parallel;
    }

    public Command setParallel(Boolean
                                       parallel)
    {
        this.parallel = parallel;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final Command that = (Command) obj;
        return
                Objects.equals(this.query, that.query) &&
                        Objects.equals(this.parallel, that.parallel);
    }

    @Override
    public int hashCode() {
        return Objects.hash(query, parallel);
    }

    @Override
    public String toString() {
        return "Command{" +
                "query=" + query +
                ", parallel=" + parallel +
                '}';
    }
    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Command> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Command newMessage()
    {
        return new Command();
    }

    public Class<Command> typeClass()
    {
        return Command.class;
    }

    public String messageName()
    {
        return Command.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Command.class.getName();
    }

    public boolean isInitialized(Command message)
    {
        return
                message.query != null
                        && message.parallel != null;
    }

    public void mergeFrom(Input input, Command message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.query = input.readString();
                    break;
                case 2:
                    message.parallel = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, Command message) throws IOException
    {
        if(message.query == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.query, false);

        if(message.parallel == null)
            throw new UninitializedMessageException(message);
        output.writeBool(2, message.parallel, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "query";
            case 2: return "parallel";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("query", 1);
        __fieldMap.put("parallel", 2);
    }


}
